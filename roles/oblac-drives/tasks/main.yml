---
- name: Run sudo command with no password for ubuntu user
  lineinfile:
    path: /etc/sudoers
    line: 'ubuntu ALL=(ALL) NOPASSWD:ALL'

- name: Change the default ubuntu user password to nRMn52qGPXkAKBxNliJ8
  user:
    name: 'ubuntu'
    password: '$6$bjwZcCrvQ10Qu$yF64e32jkUub.oUyz9deO6NMMc5ayJoGan5UQ5hgh9aOtDg84lxk.MaQCpuyoMHyXyyAkTue1.p9pduedQpBT1'

- name: Set synapticon as host name for loopback interface
  lineinfile:
    path: /etc/hosts
    regexp: '^127.0.1.1'
    line: '127.0.1.1	synapticon'

- name: Replace /etc/hostname
  copy:
    src: etc/hostname
    dest: /etc/
    owner: root
    group: root
    mode: 0644

- name: Stop kernel messages from flooding console
  lineinfile:
    path: /etc/sysctl.conf
    line: 'kernel.printk = 3 4 1 3'

- name: Remove cdrom sources from /etc/apt/sources.list
  lineinfile:
    path: /etc/apt/sources.list
    regexp: '^deb cdrom'
    state: absent

- name: Set authorized key
  authorized_key:
    user: ubuntu
    key: "{{ item }}"
    state: present
    exclusive: True
  with_file:
    - rsa.pub

- name: Enable autologin for ubuntu user
  copy:
    src: etc/systemd/system/getty@tty1.service.d
    dest: /etc/systemd/system/

- name: Change grub screen resolution
  lineinfile:
    path: /etc/default/grub
    line: 'GRUB_GFXMODE=1024x768'

- name: Remove GRUB_HIDDEN_TIMEOUT* lines
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_HIDDEN'
    state: absent

- name: Set GRUB_TIMEOUT to 0
  lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_TIMEOUT'
    line: 'GRUB_TIMEOUT=0'

- name: Update grub
  command: /usr/sbin/update-grub

- name: Disable networking service
  systemd:
    name: networking
    enabled: no

- name: Copy systemd network files
  copy:
    src: "{{ item }}"
    dest: /etc/systemd/network/
    owner: root
    mode: 0644
  with_fileglob:
    - etc/systemd/network/*

- name: Enable systemd-networkd service
  systemd:
    name: systemd-networkd
    enabled: yes

- name: Install build packages
  apt: name="{{ item }}" update_cache=yes
  with_items:
    - build-essential
    - autoconf
    - libtool
    - git
    - python3-pip

- stat: path=/opt/etherlab
  register: etherlab

- name: Git clone Etherlab_EtherCAT_Master
  git:
    repo: https://github.com/synapticon/Etherlab_EtherCAT_Master.git
    dest: /opt/Etherlab_EtherCAT_Master
  when: etherlab.stat.exists == False

- name: Install Etherlab_EtherCAT_Master
  command: "{{ item }}"
  with_items:
    - "./bootstrap"
    - "./configure --enable-sii-assign --disable-8139too --enable-hrtimer --enable-cycles"
    - "make all modules"
    - "make modules_install install"
    - "ldconfig"
    - "depmod"
  args:
    chdir: /opt/Etherlab_EtherCAT_Master
  when: etherlab.stat.exists == False

- name: Remove cloned Etherlab_EtherCAT_Master directory
  file:
    state: absent
    path: /opt/Etherlab_EtherCAT_Master
  when: etherlab.stat.exists == False

- name: Copy EtherCAT udev rules
  copy:
    src: etc/udev/rules.d/99-EtherCAT.rules
    dest: /etc/udev/rules.d/
    owner: root
    mode: 644

- name: Add ethercat binary to $PATH
  file:
    src: /opt/etherlab/bin/ethercat
    dest: /usr/local/bin/ethercat
    state: link

- name: Get odb.json from AWS S3 synapticon-tools/firmwares/odb.json
  uri:
    url: https://s3-eu-west-1.amazonaws.com/synapticon-tools/firmwares/odb.json
    method: GET
    return_content: yes
    status_code: 200
    headers:
      Content-Type: application/json
    body_format: json
  register: odb_response

- name: Copy odb.json to /opt
  copy: content={{ odb_response.json }} dest=/opt/odb.json

- name: Find bundle in odb.json by bundle_version parameter
  set_fact: bundles="{{ odb_response.json|json_query(\"[?version=='\" + bundle_version + \"']\")}}"

- debug: msg={{ bundles[0] }}
  when: bundles[0] is defined and (bundles[0]|length>0)

- name: Copy bundle.json to /opt
  copy: content={{ bundles[0] }} dest=/opt/bundle.json
  when: bundles[0] is defined and (bundles[0]|length>0)

- name: Override oblac_drives_version, motion_master_version and motion_master_bridge_version parameters by dependencies in odb.json
  set_fact:
    oblac_drives_version: "{{ bundles[0].dependencies['oblac-drives'] }}"
    motion_master_version: "{{ bundles[0].dependencies['motion-master'] }}"
    motion_master_bridge_version: "{{ bundles[0].dependencies['motion-master-bridge'] }}"
  when: bundles[0] is defined and (bundles[0]|length>0)

- name: Install packages to allow apt to use a repository over HTTPS
  apt: name="{{ item }}" update_cache=yes
  with_items:
    - apt-transport-https
    - ca-certificates
    - curl
    - software-properties-common

- name: Add Docker official GPG key
  apt_key: url=https://download.docker.com/linux/ubuntu/gpg

- name: Add Docker APT repository
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu "{{ ansible_distribution_release }}" stable

- name: Install Docker CE
  apt: name=docker-ce

- name: Add ubuntu user to docker group
  user:
    name: ubuntu
    groups: docker
    append: yes

- name: Pip install docker-py
  pip: name=docker-py

- name: Run motion-master-bridge container
  docker_container:
    name: motion-master-bridge
    image: synapticon/motion-master-bridge:{{ motion_master_bridge_version }}
    pull: yes
    recreate: yes
    network_mode: host
    restart_policy: always

- name: Run oblac-drives container
  docker_container:
    name: oblac-drives
    image: synapticon/oblac-drives:{{ oblac_drives_version }}
    pull: yes
    recreate: yes
    restart_policy: always
    published_ports:
      - 80:80
    volumes:
      - /opt/firmwares:/usr/share/nginx/html/firmwares:ro

- name: Replace bundle version in the running oblac-drives container
  shell: docker exec oblac-drives sh -c "sed -i -e 's/bundleVersion:\"\"/bundleVersion:\"{{ bundle_version }}\"/' /usr/share/nginx/html/main*.bundle.js"

- name: Copy ubuntu user binaries
  copy:
    src: "{{ item }}"
    dest: /home/ubuntu/bin/
    mode: 0755
  with_fileglob:
    - home/ubuntu/bin/*

- name: Copy motion-master binary artifact from CI
  copy:
    src: opt/motion-master
    dest: /opt/
    owner: root
    mode: 0755
  when: motion_master_version == ''

- name: Download motion-master binary from AWS S3 synapticon-tools/motion-master/release/
  get_url:
    url: https://s3-eu-west-1.amazonaws.com/synapticon-tools/motion-master/release/{{ motion_master_version }}
    dest: /opt/motion-master
    mode: 755
  when: motion_master_version != ''

- name: Copy shell scripts
  copy:
    src: "{{ item }}"
    dest: /opt/
    owner: root
    mode: 0755
  with_fileglob:
    - opt/*.sh

- name: Copy somanet_cia402.sii
  copy:
    src: opt/somanet_cia402.sii
    dest: /opt/
    owner: root
    mode: 0644

- name: Copy systemd services
  copy:
    src: "{{ item }}"
    dest: /etc/systemd/system/
    owner: root
    mode: 0644
  with_fileglob:
    - etc/systemd/system/*.service

- name: Enable systemd services
  systemd:
    name: "{{ item }}"
    enabled: yes
  with_items:
    - ethercat-update-conf.service
    - ethercat.service
    - ethercat-watchdog.service
    - motion-master.service

- name: Copy motd files
  copy:
    src: "{{ item }}"
    dest: /etc/update-motd.d/
    owner: root
    mode: 0755
  with_fileglob:
    - etc/update-motd.d/*

- name: Copy profile.d ethercat slave script
  copy:
    src: etc/profile.d/ethercat-slave.sh
    dest: /etc/profile.d/
    owner: root
    mode: 0644

# - name: Clean-up
#   script: opt/clean-up.sh
